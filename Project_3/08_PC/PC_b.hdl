// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
	
	// The 3-CHIP solution:
	Mux8Way16(a=oldVal, b=ovPlus1, c=in, d=in, e=false, f=false, g=false, h=false, sel[0]=inc, sel[1]=load, sel[2]=reset, out=inPC);
	Register(in=inPC, load=true, out=out, out=oldVal);
	Inc16(in=oldVal, out=ovPlus1);
	
	/* The Mux logic:
	 *
	 * inPC is "oldVal" if and only if (reset == load == inc == 0) (in other words, when sel == 000)
	 * inPC is "ovPlus1" if inc == 1, but load == 0 AND reset == 0 -> when sel == 001
	 * inPC is "in" if load == 1, but reset == 0 - which happens exactly when sel == (010 || 011)
	 * Finally,
	 * inPC is 0 if reset == 1 - which happens when the sel of Mux8Way16 is:
	 *														100
	 *														110
	 *														101
	 *													OR	111
	 */
}
